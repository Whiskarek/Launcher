import org.json.JSONObject

apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'io.fabric'

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "by.whiskarek.yandexlauncher"
        minSdkVersion 23
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    signingConfigs {
        release {
            storeFile rootProject.file('keystore/Keystore.jks')
            if (System.getenv("CIRCLECI") != null) {
                storePassword System.getenv("STORE_PASSWORD")
                keyPassword System.getenv("KEY_PASSWORD")
                keyAlias System.getenv("KEY_ALIAS")
            } else {
                def keystorePropertiesFile = rootProject.file("keystore/keystore.properties")
                def keystoreProperties = new Properties()
                keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
                storePassword keystoreProperties['storePassword']
                keyPassword keystoreProperties['keyPassword']
                keyAlias keystoreProperties['keyAlias']
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
            ext.betaDistributionGroupAliases = 'andrew-shkrob-1'
            def path = "release-notes/${defaultConfig.versionName}.txt"
            ext.betaDistributionReleaseNotesFilePath = rootProject.file(path).getPath()
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'androidx.core:core-ktx:1.1.0-alpha04'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    // CircleImageView
    implementation 'de.hdodenhof:circleimageview:3.0.0'
    // Fabric
    implementation('com.crashlytics.sdk.android:crashlytics:2.9.8@aar') {
        transitive = true
    }
    // App Center
    def appCenterSdkVersion = '1.11.2'
    implementation "com.microsoft.appcenter:appcenter-analytics:${appCenterSdkVersion}"
    implementation "com.microsoft.appcenter:appcenter-crashes:${appCenterSdkVersion}"
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'
}

task deployAppCenter() {
    description = 'Deploying application to AppCenter'
    group = 'publishing'
    dependsOn 'assembleRelease'

    if (System.getenv("CIRCLECI") == null || !project.hasProperty("deploy"))
        return

    def appCenterToken = System.getenv("APP_CENTER_TOKEN")
    def appCenterOwnerName = System.getenv("APP_CENTER_OWNER_NAME")
    def appCenterAppName = System.getenv("APP_CENTER_APP_NAME")
    def appCenterUrl = "https://api.appcenter.ms/v0.1/apps/${appCenterOwnerName}/${appCenterAppName}"
    def postReleaseResponse = appCenterPostRelease("${appCenterUrl}/release_uploads", appCenterToken)
    postReleaseResponse = new JSONObject(postReleaseResponse)
    def appCenterUploadId = postReleaseResponse.get("upload_id")
    def appCenterUploadUrl = postReleaseResponse.get("upload_url")

    appCenterUploadApkFile(appCenterUploadUrl)

    def updateUploadStatusResponse = appCenterUpdateUploadStatus("${appCenterUrl}/release_uploads/${appCenterUploadId}", appCenterToken)

    updateUploadStatusResponse = new JSONObject(updateUploadStatusResponse)
    def appCenterReleaseId = updateUploadStatusResponse.get("release_id")

    def releaseNotesPath = "release-notes/${android.defaultConfig.versionName}.txt"
    String releaseInfo = getDistributionConfig(rootProject.file(releaseNotesPath).getPath())

    appCenterDistributeToGroup(releaseInfo, "${appCenterUrl}/releases/${appCenterReleaseId}", appCenterToken)
}

static final String appCenterPostRelease(String appCenterReleaseUrl, String appCenterToken) {
    def postReleaseUploadQuery = "curl -X POST " +
            "--header 'Content-Type: application/json' " +
            "--header 'Accept: application/json' " +
            "--header 'X-API-Token: ${appCenterToken}' " +
            "'${appCenterReleaseUrl}'"
    def postReleaseUploadResponse =
            ['bash',
             '-c',
             postReleaseUploadQuery
            ].execute()
    postReleaseUploadResponse.waitFor()

    return postReleaseUploadResponse.text
}

static final void appCenterUploadApkFile(String appCenterUploadUrl) {
    def uploadApkFileQuery = "curl " +
            "${appCenterUploadUrl} " +
            "-F \"ipa=@app/build/outputs/apk/release/app-release.apk\""
    def uploadApkFileResponse =
            ['bash',
             '-c',
             uploadApkFileQuery
            ].execute()
    uploadApkFileResponse.waitFor()
}

static final String appCenterUpdateUploadStatus(String appCenterUploadUrl, String appCenterToken) {
    def updateUploadStatusQuery = "curl -X PATCH " +
            "'${appCenterUploadUrl}' " +
            "-H 'X-API-Token: ${appCenterToken}' " +
            "-H 'accept: application/json' " +
            "-H 'Content-Type: application/json' " +
            "-d '{ \"status\": \"committed\"}'"
    def updateUploadStatusResponse =
            ['bash',
             '-c',
             updateUploadStatusQuery
            ].execute()
    updateUploadStatusResponse.waitFor()
    return updateUploadStatusResponse.text
}

static final String getDistributionConfig(String releaseNotesPath) {
    def branch = System.getenv("CIRCLE_BRANCH")
    def commitHash = System.getenv("CIRCLE_SHA1")
    def commitMessage = ['bash', '-c', "git log --format=%B -n 1 ${commitHash}"].execute().text
    def releaseInfo = new JSONObject()
    releaseInfo.accumulate("destination_name", "Collaborators").
            accumulate("release_notes", new File(releaseNotesPath).text).
            accumulate("build",
                    new JSONObject().
                            accumulate("branch", branch).
                            accumulate("commit_hash", commitHash).
                            accumulate("commit_message", commitMessage)).
            accumulate("notify_testers", true).
            accumulate("mandatory_update", branch == "master")
    return releaseInfo.toString().replaceAll("\\\\n", "")
}

static final String appCenterDistributeToGroup(String releaseInfo, String appCenterReleaseUrl, String appCenterToken) {
    def distributeToGroupQuery = "curl -X PATCH " +
            "--header 'Content-Type: application/json' " +
            "--header 'Accept: application/json' " +
            "--header 'X-API-Token: ${appCenterToken}' " +
            "-d '${releaseInfo}' " +
            "'${appCenterReleaseUrl}'"
    def distributeToGroupResponse =
            ['bash',
             '-c',
             distributeToGroupQuery
            ].execute()
    distributeToGroupResponse.waitFor()
    return  distributeToGroupResponse.text
}